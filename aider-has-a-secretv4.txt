Welcome to lesson six of principled AI coding. This is the beginning of the edge. This lesson, along with the next two, are your advanced lessons. They consist of patterns, myself, top engineers, and big tech are using to generate massive amounts of code in fractions of the time it used to take just a couple years ago. After this lesson, you'll be building AI coding tools and techniques like engineers of the future. These lessons might break your mind a little bit. They should. This is the paradigm shift of AI coding. This is the massive mental shift required to truly use AI coding at its max capability.

In these lessons, we start looking at our AI coding assistance like we look at Google Maps. Fully trusting it, letting it do the work, all we do is point and click at where we want to go. We start handing the keys to the car to our AI coding assistance. We let them take the wheel and simply point to where we want to go from the back seat.

Great information compounds, it repeats, and then it compounds again. We're taking everything we've learned once again and scaling it up. Every principle you've learned stacks up on the previous principles.

Let me introduce you to the core topic and principle for this lesson, A-D-W, AI, developer, workflow. This technique is so impactful, it must also be the principle. The tech ecosystem will have many names for this pattern. What you call it isn't important. What matters is that you understand and use this concept in your AI coding.

To scale your AI coding capabilities even further, you can use AI developer workflows to automate away entire classes of engineering tasks. AI developer workflows hinge on a single requirement. As long as there's a pattern, you can use A-D-Ws to solve the problem once and for all.

For this lesson, you will have the AI coding skills required to stop doing repetitive, pattern-based engineering work. No more migration files, no more mindless API creation, no more templating, no more scaffolding, no more mindless testing, the same thing, and the same format over and over. In this lesson, we automate mindless engineering work.

In this lesson, you'll learn how to build a reusable AI coding assistant built to solve one problem class extremely well.

Let's begin our lesson with our first principle, kiss. Keep it simple, stupid. Let's first understand A-D-Ws, AI developer workflows at a fundamental, simple level.

Let's open the terminal, and if we type LS here, we can see our previous five code bases. Let's go ahead and install the lesson six code base. Link will be in your loop box, as always. Now we'll CDN to our sixth code base. We'll open up our favorite editor, I'm going to use code here.

Let's run through the readme. Same setup as always, we'll run UV sync to install dependencies. I'll copy lesson5's dot environment file into this directory. Go ahead, close, and open up my terminal window again, so we have the environment variables fully loaded in the instance, and then I'll run this command.

This is our analyze transcript method, and you can run on any one of the previous text files. I'll go ahead and run it on the third one. And fantastic. Now we're getting our output from our lesson five code base, right? So we have our counts, where our transcript analysis, and if we want to, we can pass in the additional arguments, like our output file, or our chart. And we created this all in lesson five. So we're going to be building up and making edits to our lesson five code base here in lesson six.

Now let me share Adder's secret with you. In this setup instructions, you can see we have a couple commands here. You can see run AI developer workflows. Let's go ahead and copy this first version, and let's just run this and then we'll discuss what's happened after it executes. I'm going to open up our terminal window, clear, paste this in, and I'm going to find this off.

Okay, so our AI developer workflow has just finished running. And if we take a look at what's happened here, it looks like we've kicked off an Adder instance with a command. What has our Adder instance done? It's increased our version number from 0.1.11 to 0.1.12.

Okay, so let's go ahead and do a couple things here first, let's confirm that change. Let's open up a project file and you can see our version has incremented. Now, how is this happening?

Let's look at our ADW version file to understand how we were able to do that. And we open up our file explorer, open up the ADW directory. We have this versioning.python file, let's open this up, and let's take a look at what's going on here.

Adder's secret is that you can AI code programmatically to automate entire classes of engineering work.

So, we have this stand-alone Python file, it's a simple script, and we have one method, top version. At the top, you can also see we're importing from Adder. If we open up our project file once again, you can see we actually have Adder as a dependency for this project. This in combination with using Astral's UV Python project manager means that we can run this code. UV run Python, so running arbitrary Python, scripts with our dependencies, and we're passing in the Python file.

Okay, so let's go ahead and dig into what is happening here. We have bump type, and bump type is going to be one of three, where we have the patch, minor, and major, and if you're not familiar, that's the different sections of the version, so we have the patch here, we have the minor here, and then we have the major version here.

Okay, so this defaults to patch, we didn't pass anything in there. We're then validating that we do have this file, so that we can actually update it. And more importantly, we're making sure that we are at the root of this project.

And now you'll see something very familiar and very, very cool. Now we're initializing the big three context prompt model. We're showcasing the read only functionality, but more importantly, we have our context editable list.

So we have our path to our pie project.tomalfile. We're using read me as a read only file, and then we have this simple high level prompt. So we're saying, you know, patch, bump, pie project.tomalf, version number. Okay. So this is just saying increment the version number.

We're using the GPT for O model, and then we're creating our aader, coder instance. We're passing in the model, the editable file names, read only file names. We're turning auto commits to false, so that we can commit ourselves. This allows us to run get diffs on our current on stage files. And then we're running shell commands false. We don't want aader to ask us any questions while it's working through this automated workflow.

And then we're saying we're on the prompt, okay? So let's be completely clear about what's happening. We're starting aader like this, a running aader with the GPT for O model. We're adding pie project to the context window. We're adding read me as a read only file, and then we're running this prompt, okay?

So we're saying patch, bump, pie project.tomalf, version number, okay? This is what we're doing in this code in an automated fashion. Clear this instance out, and run this code again.

So I'll use control R for reference search, I'll look for Python, and we'll just quite literally run this code again. Okay, if we open up our project file, you can see that change got bumped. We now went from 12 to 13. If I open up this file, you can see we're at version 13.

So I'm walking through this very slowly because I want to give you time to digest what is going on. We just automated a small task, and we never have to do this again, okay? This is the beginning of the edge. This simple example is showcasing what's coming next. You can now, using an AI coding assistant like aader, things that everything we've been working through, everything you've been learning throughout this course, you now have the capabilities to write reusable AI coding assistance built to solve specific problems extraordinarily well, okay?

So I hope you're starting to digest how important this is and how impactful this is for you and your engineering work. Let's scale this up so that we can better understand the impact of AI developer workflows.